# This workflow builds, tests, releases, and publishes a Docker image for a React Vite application.
# Ensure there is a typecheck and lint command configured in your package.json file.
# It also includes steps to configure a private Azure DevOps package feed if needed.

name: Build, Test, Release, and Publish Docker Image
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '**'
  release:
    types: [ published, edited ]
  workflow_call:
    secrets:
      AZURE_DEVOPS_TOKEN:
        description: 'Azure DevOps token for accessing private packages'
        required: true
    outputs:
      version:
        description: 'Released version'
        value: ${{ jobs.release.outputs.version }}
      image-digest:
        description: 'Docker image digest'
        value: ${{ jobs.build-and-push.outputs.digest }}

env:
  AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }} # (Optional) If you need to access private packages from Azure DevOps
  IMAGE_NAME: {{ image_name }} # TODO: Update with your image name, e.g., serapion-gmbh/nova-webapp
  REGISTRY: ghcr.io

jobs:
  test-lint:
    name: Run tests and lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Optionally, if you need to access private packages from Azure DevOps, set up .npmrc
      - name: Setup .npmrc
        run: |
          echo "//pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/:_authToken=${{  }}" > ~/.npmrc
          echo "registry=https://pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/" >> ~/.npmrc

      - name: Install dependencies
        run: npm ci

      - name: Typecheck
        run: npm run typecheck

      - name: Lint
        run: |
          npm run lint

  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
      packages: write
      issues: write
      pull-requests: write
    needs: build

    outputs:
      version: ${{ steps.release_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Setup .npmrc
        run: |
          echo "//pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/:_authToken=${{ secrets.AZURE_DEVOPS_TOKEN }}" > ~/.npmrc
          echo "registry=https://pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/" >> ~/.npmrc

      - name: Install dependencies
        run: |
          npm ci

      - name: Semantic Release
        id: release_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: false
          branches: |
            [ 
              'main',
              {
                name: 'dev',
                prerelease: true,
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMITTER_NAME: "GitHub Actions"
          GIT_COMMITTER_EMAIL: "noreply.actions@serapion.net"

  build-and-push:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    timeout-minutes: 15

    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # Optionally, if you need to access private packages from Azure DevOps, set up .npmrc
      - name: Setup .npmrc
        run: |
          echo "//pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/:_authToken=${{ secrets.AZURE_DEVOPS_TOKEN }}" > ~/.npmrc
          echo "registry=https://pkgs.dev.azure.com/serapion/nova/_packaging/nova/npm/registry/" >> ~/.npmrc

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${ env.REGISTRY }
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && needs.release.outputs.released == 'true' }}
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }},enable=${{ needs.release.outputs.version != '' }}


      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # (optional) Configure the secret files and tags for the Docker image
          secret-files: |
            npmrc=/home/runner/.npmrc
